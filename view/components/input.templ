package components

import "htmx-with-templ/view/components/utils"

type inputType int

const (
	Text inputType = iota
	Email
)

func (it inputType) String() string {
	switch it {
	case Text:
		return "text"
	case Email:
		return "email"
	default:
		return ""
	}
}

type inputTypeStruct struct {
	Text  inputType
	Email inputType
}

var InputType = inputTypeStruct{Text: Text, Email: Email}

type InputAttributes struct {
	Name  string
	Value string
	Error string
	Type  inputType
}

func NewInputAttributes(name string, opts ...func(*InputAttributes)) *InputAttributes {
	attrs := &InputAttributes{Name: name, Value: "", Error: "", Type: InputType.Text}

	for _, opt := range opts {
		opt(attrs)
	}

	return attrs
}

func WithInputValue(value string) func(*InputAttributes) {
	return func(attrs *InputAttributes) { attrs.Value = value }
}

func WithInputErrorMessage(errorMessage string) func(*InputAttributes) {
	return func(attrs *InputAttributes) { attrs.Error = errorMessage }
}

func WithInputType(inputType inputType) func(*InputAttributes) {
	return func(attrs *InputAttributes) { attrs.Type = inputType }
}

templ Input(attrs *InputAttributes, elementAttrs templ.Attributes) {
	<div class="flex flex-col gap-1">
		<input
			{ elementAttrs... }
			class={ utils.ClassNames(
				"border rounded-lg outline-sky-400 px-4 py-2", 
				utils.NewConditionalClass(
					len(attrs.Error) > 0,
					"border-red-400",
					"border-slate-500",
				),
			) }
			name={ attrs.Name }
			value={ attrs.Value }
			type={ attrs.Type.String() }
		/>
		@inputErrorMessage(attrs.Error)
	</div>
}

templ inputErrorMessage(errorMessage string) {
	if len(errorMessage) > 0 {
		<p class="text-xs text-red-400">{ errorMessage }</p>
	} else {
		<div class="h-4 w-full"></div>
	}
}
